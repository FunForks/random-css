
/* A hard-coded LCG randomizer, written with CSS
 * mathematical operators. Change the value of
 * --seed to create a new set of 8 random numbers.
 *
 * Make these numbers available as `var(--rX)`,
 * for use in property values, and as
 * `counter (rX)` for display in the `content`
 * property of `::before` and `::after`
 * pseudo-elements.
 */

  .lcg {
  --seed: 1; /* Arbitrary value. Can be changed */
  /* --a, --c and --m have good values don't change them */
  --a: 214013;
  --c: 2531011;
  --m: pow(2, 31);

  /* --r0 will change slowly as --seed changes.
   * Real randomness starts with --r1
   */
  --r0: mod(
    calc((var(--seed) * var(--a)) + var(--c)),
    var(--m)
  );

  --r1: mod(
    calc((var(--r0) * var(--a)) + var(--c)),
    var(--m)
  );

  --r2: mod(
    calc((var(--r1) * var(--a)) + var(--c)),
    var(--m)
  );

  --r3: mod(
    calc((var(--r2) * var(--a)) + var(--c)),
    var(--m)
  );

  --r4: mod(
    calc((var(--r3) * var(--a)) + var(--c)),
    var(--m)
  );

  --r5: mod(
    calc((var(--r4) * var(--a)) + var(--c)),
    var(--m)
  );

  --r6: mod(
    calc((var(--r5) * var(--a)) + var(--c)),
    var(--m)
  );

  --r7: mod(
    calc((var(--r6) * var(--a)) + var(--c)),
    var(--m)
  );

  counter-reset:
    r0 var(--r0)
    r1 var(--r1)
    r2 var(--r2)
    r3 var(--r3)
    r4 var(--r4)
    r5 var(--r5)
    r6 var(--r6)
    r7 var(--r7);
}